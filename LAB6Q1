#include <stdio.h>

#define MAX 20

int isReflexive(int relation[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        if (relation[i][i] != 1)
            return 0;
    }
    return 1;
}

int isSymmetric(int relation[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (relation[i][j] != relation[j][i])
                return 0;
        }
    }
    return 1;
}

int isAntisymmetric(int relation[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != j && relation[i][j] && relation[j][i])
                return 0;
        }
    }
    return 1;
}

int isTransitive(int relation[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (relation[i][j]) {
                for (int k = 0; k < n; k++) {
                    if (relation[j][k] && !relation[i][k])
                        return 0;
                }
            }
        }
    }
    return 1;
}

int main() {
    int relation[MAX][MAX];
    int n;

    printf("Enter the number of elements in the set: ");
    scanf("%d", &n);

    printf("Enter the relation matrix (%d x %d):\n", n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &relation[i][j]);
        }
    }

    printf("\nProperties of the relation:\n");

    if (isReflexive(relation, n))
        printf("Reflexive: Yes\n");
    else
        printf("Reflexive: No\n");

    if (isSymmetric(relation, n))
        printf("Symmetric: Yes\n");
    else
        printf("Symmetric: No\n");

    if (isAntisymmetric(relation, n))
        printf("Antisymmetric: Yes\n");
    else
        printf("Antisymmetric: No\n");

    if (isTransitive(relation, n))
        printf("Transitive: Yes\n");
    else
        printf("Transitive: No\n");

    return 0;
